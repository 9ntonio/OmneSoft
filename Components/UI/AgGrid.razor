@using Microsoft.JSInterop
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime

<div id="@ContainerId" class="ag-theme-quartz" style="height: @Height; width: @Width;"></div>

@code {
    [Parameter] public string ContainerId { get; set; } = Guid.NewGuid().ToString();
    [Parameter] public string Height { get; set; } = "400px";
    [Parameter] public string Width { get; set; } = "100%";
    [Parameter] public object[]? RowData { get; set; }
    [Parameter] public object[]? ColumnDefs { get; set; }
    [Parameter] public EventCallback<object> OnRowClicked { get; set; }
    [Parameter] public EventCallback<object[]> OnSelectionChanged { get; set; }
    [Parameter] public bool EnableSelection { get; set; } = false;
    [Parameter] public string SelectionMode { get; set; } = "single"; // "single" or "multiple"

    private DotNetObjectReference<AgGrid>? dotNetRef;
    private bool isGridInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeGrid();
        }
    }

    private async Task InitializeGrid()
    {
        try
        {
            dotNetRef = DotNetObjectReference.Create(this);

            var gridOptions = new
            {
                columnDefs = ColumnDefs ?? Array.Empty<object>(),
                rowData = RowData ?? Array.Empty<object>(),
                // Use correct v34+ rowSelection object syntax
                rowSelection = EnableSelection ? new { mode = SelectionMode == "single" ? "singleRow" : "multiRow" } : (object?)null,
                animateRows = true,
                // Use legacy theme mode to work with CSS files
                theme = "legacy",
                defaultColDef = new
                {
                    sortable = true,
                    filter = true,
                    resizable = true,
                    flex = 1,
                    minWidth = 100
                }
            };

            isGridInitialized = await JSRuntime.InvokeAsync<bool>("agGridInterop.createGrid", ContainerId, gridOptions, dotNetRef);

            if (isGridInitialized)
            {
                await Task.Delay(100); // Small delay to ensure grid is ready
                await JSRuntime.InvokeVoidAsync("agGridInterop.sizeToFit", ContainerId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing AG Grid: {ex.Message}");
        }
    }

    public async Task UpdateRowData(object[] newRowData)
    {
        if (isGridInitialized)
        {
            RowData = newRowData;
            await JSRuntime.InvokeVoidAsync("agGridInterop.setRowData", ContainerId, newRowData);
        }
    }

    public async Task<object[]> GetSelectedRows()
    {
        if (isGridInitialized)
        {
            return await JSRuntime.InvokeAsync<object[]>("agGridInterop.getSelectedRows", ContainerId);
        }
        return Array.Empty<object>();
    }

    public async Task SizeToFit()
    {
        if (isGridInitialized)
        {
            await JSRuntime.InvokeVoidAsync("agGridInterop.sizeToFit", ContainerId);
        }
    }

    public async Task AutoSizeAllColumns()
    {
        if (isGridInitialized)
        {
            await JSRuntime.InvokeVoidAsync("agGridInterop.autoSizeAllColumns", ContainerId);
        }
    }

    [JSInvokable]
    public async Task HandleRowClicked(object rowData)
    {
        if (OnRowClicked.HasDelegate)
        {
            await OnRowClicked.InvokeAsync(rowData);
        }
    }

    [JSInvokable]
    public async Task HandleSelectionChanged(object[] selectedRows)
    {
        if (OnSelectionChanged.HasDelegate)
        {
            await OnSelectionChanged.InvokeAsync(selectedRows);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (isGridInitialized)
        {
            await JSRuntime.InvokeVoidAsync("agGridInterop.destroyGrid", ContainerId);
        }
        dotNetRef?.Dispose();
    }
}
