@page "/"
@inject IJSRuntime JSRuntime
@inject IAppStateService AppState
@namespace OmneSoft.Pages

<PageTitle>Users - OmneSoft</PageTitle>

<header class="bg-white shadow-sm border-b">
    <div class="px-8 py-4">
        <div class="flex items-center justify-between">
            <h1 class="text-2xl font-bold text-gray-900">Users Management</h1>
            <div class="flex items-center space-x-4">
                <button @onclick="RefreshData"
                        disabled="@isRefreshing"
                        class="@GetRefreshButtonClass() font-medium py-2 px-4 rounded-lg transition-colors">
                    @if (isRefreshing)
                    {
                        <span class="inline-flex items-center">
                            <svg class="animate-spin -ml-1 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            Reloading...
                        </span>
                    }
                    else
                    {
                        <span class="inline-flex items-center">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                            </svg>
                            Reload Data
                        </span>
                    }
                </button>

                <div class="flex items-center space-x-2">
                    <label class="flex items-center cursor-pointer">
                        <input type="checkbox" @bind="simulateErrors" class="sr-only">
                        <div class="relative">
                            <div class="@(simulateErrors ? "bg-blue-600" : "bg-gray-300") w-10 h-6 rounded-full shadow-inner transition-colors"></div>
                            <div class="@(simulateErrors ? "translate-x-4" : "translate-x-0") absolute w-4 h-4 bg-white rounded-full shadow inset-y-1 left-1 transition-transform"></div>
                        </div>
                        <span class="ml-2 text-sm font-medium text-gray-700">
                            Simulate Errors (50% chance)
                        </span>
                    </label>
                </div>
            </div>
        </div>
    </div>
</header>

<div class="flex-1 p-8">
    <div class="h-full">
        <UsersGrid @ref="usersGrid"
                   ContainerId="users-grid"
                   EnableSelection="true"
                   SelectionMode="single"
                   OnRowClicked="OnRowClicked"
                   OnSelectionChanged="OnSelectionChanged"
                   DataUrl="data/users.json"
                   SimulateErrors="@simulateErrors" />
    </div>
</div>

@code {
    private UsersGrid? usersGrid;
    private bool simulateErrors = false;
    private bool isRefreshing = false;

    private async Task RefreshData()
    {
        isRefreshing = true;
        StateHasChanged();

        try
        {
            if (usersGrid != null)
            {
                await usersGrid.RefreshData();
            }
        }
        catch (Exception)
        {
            // Error handling is done within the UsersGrid component
        }
        finally
        {
            isRefreshing = false;
            StateHasChanged();
        }
    }

    private void OnRowClicked(object rowData)
    {
        // Handle row click if needed
    }

    private void OnSelectionChanged(object[] selectedRows)
    {
        // Handle selection change if needed
    }

    private string GetRefreshButtonClass()
    {
        return isRefreshing
            ? "bg-blue-400 cursor-not-allowed text-white"
            : "bg-blue-500 hover:bg-blue-700 text-white";
    }
}
